function sim_world_data = init_graphics(sim_world_data)

    % expose public functions
    sim_world_data.funcs.graphics.init_plots = ...
        @(interface,funcs,road,lane,road_edge,road_area,ego,stand,mov,onc)...
        init_plots(...
        interface,funcs,road,lane,road_edge,road_area,ego,stand,mov,onc);
    
    % *********************** function definitions ***********************

    function [interface,road,lane,road_edge,road_area,ego,stand,mov,onc] =...
            init_plots(interface,funcs,road,lane,road_edge,road_area,...
            ego,stand,mov,onc)
        % ADAS SimWorld: Initialize plots
        
        set(interface.figures.main.axes.static,... % static axes limits
            'xlim', [road.x(1) road.x(end)],...
            'ylim', [-1 1]*road.T/2);
        xylim =...
            get(interface.figures.main.sliders.ax_dynamic_zoom,'max')  -...
            get(interface.figures.main.sliders.ax_dynamic_zoom,'value')+...
            get(interface.figures.main.sliders.ax_dynamic_zoom,'min');
        set(interface.figures.main.axes.dynamic,...% dynamic axes limits
            'xlim', [-1 1]*xylim,...
            'ylim', [-1 1]*xylim,...
            'view', [0,90],...
            'projection', 'orthographic');
        set(interface.figures.main.sliders.ax_dynamic_rot,'value',0)
        set(interface.figures.main.sliders.ax_dynamic_tilt,'value',90)
        funcs.gui_callbacks.axes_dynamic_perspective_Callback(...
            interface.figures.main.sliders.ax_dynamic_ypan)

        % initialze common variables
        r_x = road.x;           % road x array
        r_y = road.y(r_x);      % road y array
        l_x = lane.x(r_x);      % lane x array
        l_y = lane.y(r_x);      % lane y array
        re_x = road_edge.x(r_x);      % road edge x array
        re_y = road_edge.y(r_x);      % road edge y array
        
        % extrapolate re_x and re_x to full x range
        [re_l,re_r,re_c] = funcs.sim.split_road_edges(re_x,re_y);
        xi = r_x(1:10:end)';        % lower resolution array for plotting
        re_l = [xi interp1(re_l(:,1),re_l(:,2),xi,'pchirp','extrap')];
        re_r = [xi interp1(re_r(:,1),re_r(:,2),xi,'pchirp','extrap')];
        re_c = [xi interp1(re_c(:,1),re_c(:,2),xi,'pchirp','extrap')];
        %reconstruct road edges
        re_x = [re_l(:,1);nan;re_c(:,1);nan;re_r(:,1)]';
        re_y = [re_l(:,2);nan;re_c(:,2);nan;re_r(:,2)]';
        
        e_x = ego.x(0,ego.x_1); % ego x position
        e_y = ego.y(e_x);       % ego y position
        
        s_x = stand.x;          % standing object x array
        s_y = stand.y;          % standing object y array
        
        % find objects standing in the road
        [ra_l,ra_r] = funcs.sim.find_road_points(re_x,re_y,ego,e_y,s_x);
        
        % remove objects standing in the road
        stand.x(logical((ra_r < s_y).*(s_y < ra_l))) = [];
        stand.y(logical((ra_r < s_y).*(s_y < ra_l))) = [];
        stand.z(logical((ra_r < s_y).*(s_y < ra_l))) = [];
        stand.n = length(stand.y);
        
        % initialize road area
        xl = [0 r_x(end)];
        yl = [-1 1]*road.T/2;
        road_area = funcs.sim.find_road_area(...
            interface,funcs,road,road_area,re_x,re_y,ego,e_y,xl,yl);

        % static axes plots:
        road_area.m.static = patch(road_area.X,road_area.Y,[50 150 0]/270,...
            'facealpha',0.7,...
            'parent',interface.figures.main.axes.static);
        
        road.m.static = plot(interface.figures.main.axes.static,...
            r_x, r_y,'w','linewidth',2,'visible','off');
        lane.m.static = plot(interface.figures.main.axes.static,...
            l_x, l_y,'--w','linewidth',2);
        road_egde.m.static = plot(interface.figures.main.axes.static,...
            re_x, re_y,'w','linewidth',2);
        ego.m.static =  plot(interface.figures.main.axes.static,...
            0,0,'or','linewidth',2);
        stand.m.static = plot(interface.figures.main.axes.static,...
            stand.x, stand.y,'og','linewidth',2);
        mov.m.static =  plot(interface.figures.main.axes.static,...
            0,0,'o','color',[1 0.5 0],'linewidth',2);
        onc.m.static =  plot(interface.figures.main.axes.static,...
            0,0,'oc','linewidth',2);        
       
        % dynamic axes plots
        %   road area
        road_area.m.dynamic_surf = surf(...
            [0 0],[0 0],zeros(2),...
            'edgecolor','none',...
            'facealpha',0.7,...
            'parent',interface.figures.main.axes.dynamic);
        road_area.m.dynamic_surf_edge = surf(...
            [0 0],[0 0],zeros(2),...
            'facecolor','none',...
            'edgecolor',[0.7 1 0]*0.9,... 
            'parent',interface.figures.main.axes.dynamic);
        road_area.m.dynamic_patch = patch(...
            0,0,[50 150 0]/270,...
            'edgecolor','none',...
            'facealpha',0.7,...
            'parent',interface.figures.main.axes.dynamic);

        % sensor fov
        for ii = 1 : ego.sensor.n
            % dynamic axes
            ego.sensor.m(ii) = patch(... % draw sensor FoV
                ego.sensor.fov.draw.circ{ii}(:,2),...
                ego.sensor.fov.draw.circ{ii}(:,1),...
                'w','FaceAlpha',.15,...
                'visible','off',...
                'parent', interface.figures.main.axes.dynamic);
            % sensor specific FoV
            ego.sensor.s(ii) = patch(... % draw sensor FoV
                ego.sensor.fov.draw.fov(:,2),...
                ego.sensor.fov.draw.fov(:,1),...
                'w','FaceAlpha',.3,...
                'parent', interface.figures.main.axes.sensor(ii));
            ego.sensor.d{ii}.road = plot(...
                interface.figures.main.axes.sensor(ii),...
                0,0,'w','linewidth',2);
            ego.sensor.d{ii}.stand = plot(...
                interface.figures.main.axes.sensor(ii),...
                0,0,'og','linewidth',2);
            ego.sensor.d{ii}.mov = plot(...
                interface.figures.main.axes.sensor(ii),...
                0,0,'o','color',[1 0.5 0],'linewidth',2);
            ego.sensor.d{ii}.onc = plot(...
                interface.figures.main.axes.sensor(ii),...
                0,0,'oc','linewidth',2);
        end
              
        %   simulated objects
        road.m.dynamic = plot(interface.figures.main.axes.dynamic,...
            0,0,'w','linewidth',2,'visible','off');
        lane.m.dynamic = plot(interface.figures.main.axes.dynamic,...
            0,0,'--w','linewidth',2);
        road_edge.m.dynamic = plot(interface.figures.main.axes.dynamic,...
            0,0,'w','linewidth',2);
        ego.m.dynamic = patch(...              % draw ego cube
            ego.cube.x(ego.cube.idx),...
            ego.cube.y(ego.cube.idx),...
            ego.cube.z(ego.cube.idx),...
            'r','facealpha',0.5,...
            'parent',interface.figures.main.axes.dynamic);
        for ii = 1 : stand.n
            stand.m.dynamic(ii) = patch(...    % draw standing object cubes
                0,0,0,...
                'parent',interface.figures.main.axes.dynamic);
            set(stand.m.dynamic(ii),...
                'FaceColor','flat',...
                'FaceVertexCData',stand.color)
        end
        for ii = 1 : mov.n
            mov.m.dynamic(ii) = patch(...      % draw moving object cubes
                0,0,0,...
                'facecolor',[1 0.5 0],...
                'facealpha',0.5,...
                'parent',interface.figures.main.axes.dynamic);
        end
        for ii = 1 : onc.n
            onc.m.dynamic(ii) = patch(...       % draw moving object cubes
                0,0,0,...
                'c','facealpha',0.5,...
                'parent',interface.figures.main.axes.dynamic);
        end
        %   user-detected objects
        ego.m.dynamic_user = plot3(interface.figures.main.axes.dynamic,...
            0,0,0,'sr','visible','off','markersize',15,'linewidth',2);
        stand.m.dynamic_user = plot3(interface.figures.main.axes.dynamic,...
            0,0,0,'sg','visible','off','markersize',15,'linewidth',2);
        mov.m.dynamic_user = plot3(interface.figures.main.axes.dynamic,...
            0,0,0,'s','color',[1 0.5 0],'visible','off','markersize',15,...
            'linewidth',2);
        onc.m.dynamic_user = plot3(interface.figures.main.axes.dynamic,...
            0,0,0,'sc','visible','off','markersize',15,'linewidth',2);
        
        interface.figures.main.ax_init = true;
    end

end
